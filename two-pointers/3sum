class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res = []

        for i, a in enumerate(nums):
            if i > 0 and a == nums[i - 1]:
                continue
            l, r = i + 1, len(nums) - 1
            while l < r:
                threeSum = a + nums[l] + nums[r]
                if threeSum > 0:
                    r -= 1
                elif threeSum < 0:
                    l += 1
                else:
                    res.append([a, nums[l], nums[r]])
                    l += 1
                    while nums[l] == nums[l - 1] and l < r: #to check for duplicates
                        l+=1
        return res

#basically just 2sum II (sorted input array) but have to do it alongside with every num in list

#Time: O(nlogn) + O(n^2) (sorting + nested loops)
#Space: O(1) or O(n) depending on the sorting algo
